package code.ponfee.commons.jce.ecc;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;

public class RSAKey implements Key {

    public final BigInteger n;
    public final BigInteger e;
    public final BigInteger d;
    public final boolean secret;

    public boolean isPublic() {
        return (!secret);
    }

    public RSAKey(int keySize) {
        this.secret = true;

        BigInteger p = new BigInteger(keySize / 2, 500, Cryptor.SECURE_RANDOM); // prime p
        BigInteger q = new BigInteger(keySize / 2, 500, Cryptor.SECURE_RANDOM); // prime q
        this.n = p.multiply(q); // mod

        BigInteger pSub1 = p.subtract(BigInteger.ONE); // p-1
        BigInteger qSub1 = q.subtract(BigInteger.ONE); // q-1
        BigInteger phin = pSub1.multiply(qSub1);
        //BigInteger phin = pSub1.divide(pSub1.gcd(qSub1)).multiply(qSub1);;

        BigInteger e;
        do {
            e = new BigInteger(keySize, Cryptor.SECURE_RANDOM);
        } while (!e.gcd(phin).equals(BigInteger.ONE));

        this.e = e;
        this.d = this.e.modInverse(phin);
    }

    public RSAKey(BigInteger n, BigInteger e, 
                  BigInteger d, boolean secret) {
        this.n = n;
        this.e = e;
        this.d = d;
        this.secret = secret;
    }

    /** setkey takes a key string generated by tostring and sets this key to its parameters*/
    public void setkey(String keystr) {
        return;
    }

    /** Turns this key into a public key (does nothing if this key is public) */
    public Key getPublic() {
        return new RSAKey(n, e, null, false);
    }

    // Secret: (d, n, e)
    // Public: (n, e)
    public void writeKey(OutputStream out) throws IOException {
        DataOutputStream output = new DataOutputStream(out);
 
        output.writeBoolean(secret);

        if (secret) {
            byte[] db = d.toByteArray();
            output.writeInt(db.length);
            output.write(db);
        }

        byte[] nb = n.toByteArray();
        output.writeInt(nb.length);
        output.write(nb);

        byte[] eb = e.toByteArray();
        output.writeInt(eb.length);
        output.write(eb);
    }

    // Secret: (d, n, e)
    // Public: (n, e)
    public Key readKey(InputStream in) throws IOException {
        DataInputStream input = new DataInputStream(in);
        boolean secret = input.readBoolean();
        BigInteger d = null;
        if (secret) {
            byte[] db = new byte[input.readInt()];
            input.read(db);
            d = new BigInteger(db);
        }
        
        byte[] nb = new byte[input.readInt()];
        input.read(nb);
        BigInteger n = new BigInteger(nb);
        
        byte[] eb = new byte[input.readInt()];
        input.read(eb);
        BigInteger e = new BigInteger(eb);

        return new RSAKey(n, e, d, secret);
    }
}
