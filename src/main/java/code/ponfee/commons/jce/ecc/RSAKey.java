package code.ponfee.commons.jce.ecc;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;

public class RSAKey implements Key {

    public BigInteger moudles;
    public BigInteger publicKey;
    public BigInteger privateKey;
    public boolean secret;

    public boolean isPublic() {
        return (!secret);
    }

    public RSAKey(int keySize) {
        BigInteger p = new BigInteger(keySize / 2, 500, Cryptor.SECURE_RANDOM);
        BigInteger q = new BigInteger(keySize / 2, 500, Cryptor.SECURE_RANDOM);
        BigInteger phin = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));
        this.secret = true;
        this.moudles = p.multiply(q);

        this.publicKey = new BigInteger(keySize, Cryptor.SECURE_RANDOM);
        while (!this.publicKey.gcd(phin).equals(BigInteger.ONE)) {
            this.publicKey = new BigInteger(keySize, Cryptor.SECURE_RANDOM);
        }

        this.privateKey = this.publicKey.modInverse(phin);
    }

    public RSAKey(BigInteger moudles, BigInteger publicExponent, 
                  BigInteger privateExponent, boolean secret) {
        this.moudles = moudles;
        this.publicKey = publicExponent;
        this.privateKey = privateExponent;
        this.secret = secret;
    }

    /** setkey takes a key string generated by tostring and sets this key to its parameters*/
    public void setkey(String keystr) {
        return;
    }

    /** Turns this key into a public key (does nothing if this key is public) */
    public Key getPublic() {
        return new RSAKey(moudles, publicKey, null, false);
    }

    // Secret: (privateExponent, moudles, publicExponent)
    // Public: (moudles, publicExponent)
    public void writeKey(OutputStream out) throws IOException {
        DataOutputStream output = new DataOutputStream(out);
 
        output.writeBoolean(secret);

        if (secret) {
            byte[] db = privateKey.toByteArray();
            output.writeInt(db.length);
            output.write(db);
        }

        byte[] nb = moudles.toByteArray();
        output.writeInt(nb.length);
        output.write(nb);

        byte[] eb = publicKey.toByteArray();
        output.writeInt(eb.length);
        output.write(eb);
    }

    // Secret: (privateExponent, moudles, publicExponent)
    // Public: (moudles, publicExponent)
    public Key readKey(InputStream in) throws IOException {
        DataInputStream input = new DataInputStream(in);
        boolean secret = input.readBoolean();
        BigInteger privateExponent = null;
        if (secret) {
            byte[] db = new byte[input.readInt()];
            input.read(db);
            privateExponent = new BigInteger(db);
        }
        
        byte[] nb = new byte[input.readInt()];
        input.read(nb);
        BigInteger moudles = new BigInteger(nb);
        
        byte[] eb = new byte[input.readInt()];
        input.read(eb);
        BigInteger publicExponent = new BigInteger(eb);

        return new RSAKey(moudles, publicExponent, privateExponent, secret);
    }
}
